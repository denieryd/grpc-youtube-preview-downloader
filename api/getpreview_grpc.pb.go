// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/proto/getpreview.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PreviewerClient is the client API for Previewer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreviewerClient interface {
	GetPreview(ctx context.Context, in *PreviewUrl, opts ...grpc.CallOption) (*PreviewImage, error)
}

type previewerClient struct {
	cc grpc.ClientConnInterface
}

func NewPreviewerClient(cc grpc.ClientConnInterface) PreviewerClient {
	return &previewerClient{cc}
}

func (c *previewerClient) GetPreview(ctx context.Context, in *PreviewUrl, opts ...grpc.CallOption) (*PreviewImage, error) {
	out := new(PreviewImage)
	err := c.cc.Invoke(ctx, "/Previewer/GetPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreviewerServer is the server API for Previewer service.
// All implementations must embed UnimplementedPreviewerServer
// for forward compatibility
type PreviewerServer interface {
	GetPreview(context.Context, *PreviewUrl) (*PreviewImage, error)

}

// UnimplementedPreviewerServer must be embedded to have forward compatible implementations.
type UnimplementedPreviewerServer struct {
}

func (UnimplementedPreviewerServer) GetPreview(context.Context, *PreviewUrl) (*PreviewImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreview not implemented")
}
func (UnimplementedPreviewerServer) mustEmbedUnimplementedPreviewerServer() {}

// UnsafePreviewerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreviewerServer will
// result in compilation errors.
type UnsafePreviewerServer interface {
	mustEmbedUnimplementedPreviewerServer()
}

func RegisterPreviewerServer(s grpc.ServiceRegistrar, srv PreviewerServer) {
	s.RegisterService(&Previewer_ServiceDesc, srv)
}

func _Previewer_GetPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreviewerServer).GetPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Previewer/GetPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreviewerServer).GetPreview(ctx, req.(*PreviewUrl))
	}
	return interceptor(ctx, in, info, handler)
}

// Previewer_ServiceDesc is the grpc.ServiceDesc for Previewer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Previewer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Previewer",
	HandlerType: (*PreviewerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPreview",
			Handler:    _Previewer_GetPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/getpreview.proto",
}
